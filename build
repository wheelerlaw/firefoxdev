#!/usr/bin/env bash
set -e

case $1 in
clean)
    rm -rf out
    rm -f *.deb
    ;;

install)
    dpkg -i firefoxdev_*_amd64.deb
    ;;
*)
    version=`cat data.yaml | yq .version -r`
    download_link=`cat data.yaml | yq .link -r`
    echo "Version: $version"

    which git
    git status

    if [ "$TRAVIS_EVENT_TYPE" = "cron" ]; then
        upstream_download_link=$(curl -fsSI "https://download.mozilla.org/?product=firefox-devedition-latest-ssl&os=linux64&lang=en-US" | tr -d '\r' | sed -En 's/^Location: (.*)/\1/p')
        upstream_version=$(echo $upstream_download_link | sed 's/.*\/releases\/\([^\/]*\)\/.*/\1/')
        if [ "$upstream_version" != "$version" ]; then
            echo "link: '$upstream_download_link'" > data.yaml
            echo "version: $version" >> data.yaml
        fi
        exit
    fi

    #### Place the binary files in the proper locations
    mkdir -p out/opt
    curl -fsSL "$download_link" | tar xjC out/opt/
    rm -rf out/opt/firefoxdev
    mv out/opt/firefox out/opt/firefoxdev

    #### Create the control file from the template
    mkdir -p out/DEBIAN
    export version="$version"
    envsubst '${version}' < src/DEBIAN/control > out/DEBIAN/control

    #### Copy all of the non-generated stuff to the output folder.
    mkdir -p out/usr/share
    cp -R src/usr/share out/usr/

    #### Create the linked binary
    mkdir -p out/usr/local/bin
    ln -sf ../../../opt/firefoxdev/firefox out/usr/local/bin/firefoxdev

    #### Create the links to the icons
    for i in $(ls out/opt/firefoxdev/browser/chrome/icons/default); do
        resolution=$(echo $i | sed 's|default\([0-9]*\)\.png|\1|')
        mkdir -p out/usr/share/icons/hicolor/${resolution}x${resolution}/apps/
        ln -sf ../../../../../../opt/firefoxdev/browser/chrome/icons/default/default${resolution}.png out/usr/share/icons/hicolor/${resolution}x${resolution}/apps/firefoxdev.png
    done

    #### Build the package itself
    dpkg-deb --build out "firefoxdev_${version}_amd64.deb"
    ;;
esac

